{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game/webpack/bootstrap","webpack://game/webpack/runtime/define property getters","webpack://game/webpack/runtime/hasOwnProperty shorthand","webpack://game/./content/deck.ts","webpack://game/./content/game.ts","webpack://game/./content/index.ts","webpack://game/./content/start.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { ICardType } from \"./game\";\nconst SUIT = [\"♠\", \"♣\", \"♥\", \"♦\"];\nconst VALUES = [\"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\"];\nexport default class Deck {\n  cards: Card[];\n  constructor(cards = freshDeck()) {\n    this.cards = cards;\n  }\n  get numberOfCards() {\n    return this.cards.length;\n  }\n\n  shuffle() {\n    for (let i = this.numberOfCards - 1; i > 0; i--) {\n      const newIndex = Math.floor(Math.random() * (i + 1));\n      const oldValue = this.cards[newIndex];\n      this.cards[i] = oldValue;\n    }\n  }\n}\nclass Card {\n  suit: string;\n  value: string;\n  constructor(suit: string, value: string) {\n    this.suit = suit;\n    this.value = value;\n  }\n}\nfunction freshDeck() {\n  return SUIT.flatMap((suit) => {\n    return VALUES.map((value) => {\n      return new Card(suit, value);\n    });\n  });\n}\n\nexport const duplicateArrayAndMix = (array: ICardType[]) => {\n  const duplicateCards = array.flatMap((i: ICardType) => [i, i]);\n  for (let i = 0; i < duplicateCards.length - 1; i++) {\n    const j = i + Math.floor(Math.random() * (duplicateCards.length - i));\n    const temp = duplicateCards[j];\n    duplicateCards[j] = duplicateCards[i];\n    duplicateCards[i] = temp;\n  }\n  return duplicateCards;\n};\n\nexport const createIconsArray = (initialCount: string) => {\n  const deck = new Deck();\n\n  deck.shuffle();\n\n  switch (initialCount) {\n    case \"1\":\n      return duplicateArrayAndMix(deck.cards.slice(0, 3));\n    case \"2\":\n      return duplicateArrayAndMix(deck.cards.slice(0, 6));\n    case \"3\":\n      return duplicateArrayAndMix(deck.cards.slice(0, 9));\n    default:\n      break;\n  }\n};\n","import { createIconsArray } from \"./deck\";\nimport { cardsApp } from \"./index\";\nimport \"./styles.css\";\ndeclare global {\n  interface Window {\n    // ⚠️ notice that \"Window\" is capitalized here\n    timeGame: ReturnType<typeof setInterval>;\n  }\n}\n\nexport interface ICardType {\n  suit: string;\n  value: string;\n}\n\ntype suitsBackgroundType = {\n  [word: string]: string;\n};\n\nexport const startGame = (difficult: string) => {\n  const suitsBackground: suitsBackgroundType = {\n    \"♠\": \"pik.svg\",\n    \"♣\": \"krest.svg\",\n    \"♥\": \"che.svg\",\n    \"♦\": \"bub.svg\",\n  //   switch (suit.charAt(0)) {\n  //     case \"♠\":\n  //       suit= \"./cards/pik.svg\";\n  //         break;\n  //     case \"♥\":\n  //       suit = \"./cards/che.svg\";\n  //         break;\n  //     case \"♦\":\n  //       suit= \"./cards/bub.svg\";\n  //         break;\n  //     case \"♣\":\n  //       suit= \"./cards/krest.svg\";\n  //         break;\n  //     default:\n  //         break;\n  // }\n  };\n\n  // рендер\n  const gameSection = document.querySelector(\n    \".game-section-start__container\"\n  ) as HTMLElement;\n  const gameTable = document.querySelector(\n    \".game-section-cards__container\"\n  ) as HTMLElement;\n  gameTable.style.opacity = \"1\";\n  gameSection.style.display = \"none\";\n  const cardsIcons = createIconsArray(difficult) as ICardType[];\n\n  const cardsHtml = cardsIcons\n    .map((card: ICardType) => {\n      return `\n      <div data-value=${card.value} data-suit=${\n        card.suit\n      } class=\"game-table__card\" >\n     \n          <div class=\"card__face\" style=\"background: url(./cards/${\n            suitsBackground[card.suit]\n          }) center center no-repeat, rgb(255, 255, 255);\">\n         \n              <div class=\"card__top\">    \n                  <div class=\"card__value\">${card.value}\n                  </div>\n                  <img class=\"card__suit\" src=\"./cards/${\n                    suitsBackground[card.suit]\n                  }\" alt=\"suit\">\n              </div>\n              <img src=\"./cards/${\n                suitsBackground[card.suit]\n              }\" alt=\"suit\" class=\"suit_big\">\n              <div class=\"card__bottom\">    \n                  <div class=\"card__value\">${card.value}\n                  </div>\n                  <img class=\"card__suit\" src=\"./cards/${\n                    suitsBackground[card.suit]\n                  }\" alt=\"suit\">\n              </div>\n              \n              \n          </div>\n          <div class=\"card__back\"></div>\n          \n    </div>\n     \n      `;\n    })\n    .join(\"\");\n\n  gameTable.innerHTML = `\n  <div class=\"game_content\">\n    <div class=\"game_background\" \n        <div id=\"timer\">\n            <div class=\"timer__text\">\n                <span class='timer__text_item'>min</span> <span class='timer__text_item'>sek</span>\n            </div>\n            <p class='timer'>00.00</p>\n        </div>\n        <button class=\"game_content_button\">Начать заново</button>\n    </div>\n        <div class=\"game-cards-box\">\n        ${cardsHtml}\n        </div> `;\n\n  const restartBTn = document.querySelector(\".game_content_button\");\n  restartBTn.addEventListener(\"click\", () => {\n    startGame(difficult);\n  });\n \n  // Скрытие карт\n  function closecards() {\n    const cards: NodeListOf<HTMLElement> =\n      document.querySelectorAll(\".card__back\");\n    for (const card of cards) {\n      card.style.display = \"flex\";\n    }\n  }\n\n  // Скрытие карт через 5 секунд и запуск игры\n  const coutDownEl = document.querySelector(\".timer\") as HTMLElement;\n  let timer = 5;\n  coutDownEl.textContent = \"00.05\";\n  const id = setInterval(function () {\n    timer--;\n    if (timer === 0) {\n      clearInterval(id);\n      closecards();\n      game();\n    } else {\n      coutDownEl.innerHTML = `00.0${timer}`;\n    }\n  }, 1000);\n\n  // время\n  function timerGame() {\n    timer = 0;\n\n    coutDownEl.textContent = \"00.00\";\n    function setTime() {\n      timer++;\n      const minutes = (\"00\" + Math.floor(timer / 60)).slice(-2);\n      const seconds = (\"00\" + (timer % 60)).slice(-2);\n      coutDownEl.textContent = `${minutes}.${seconds}`;\n    }\n    window.timeGame = setInterval(setTime, 1000);\n    setTimeout(clearInterval, 600000, window.timeGame);\n  }\n\n  // конец игры\n  function isWinner(winner: boolean) {\n    clearInterval(window.timeGame);\n    gameSection.style.display = \"block\";\n    const timerResult = coutDownEl.textContent;\n    gameTable.style.opacity = \"0.3\";\n    gameSection.classList.add(\"popup\");\n\n    gameSection.innerHTML = `<div class=\"game-section-start__container\">\n            <img class=\"timer_result-img\" src=\"./cards/${\n              winner ? '\"win.svg\" alt=\"win\"' : '\"lose.svg\" alt=\"lose\"'\n            }\"  >\n            \n            <h2 class=\"game-menu_result-title\">${\n              winner ? \"Вы выиграли\" : \"Вы проиграли\"\n            }</h2>\n            <p class=\"title-time\">Затраченное время</h2>\n            <p class='timer_result'>${timerResult}</p>\n            <button class=\"game-menu__start-btn\">Играть снова</button>\n            </div>`;\n\n    const restartBTn = document.querySelector(\".game-menu__start-btn\");\n    restartBTn.addEventListener(\"click\", () => {\n      cardsApp();\n    });\n  }\n\n  //игра\n  function game() {\n    timerGame();\n    let firstCard: number | null = null;\n    let secondCard: number | null = null;\n    let clickable = true;\n    let winner = false;\n    const allCards: Array<HTMLElement> = Array.from(\n      document.querySelectorAll(\".game-table__card\")\n    );\n\n    allCards.forEach((card, index) =>\n      card.addEventListener(\"click\", () => {\n        console.log(card);\n        if (clickable === true && !card.classList.contains(\"successfully\")) {\n          card.querySelector(\".card__back\")\n            ? card.querySelector(\".card__back\").classList.remove(\"card__back\")\n            : false;\n\n          if (firstCard === null) {\n            firstCard = index;\n          } else {\n            if (index !== firstCard) {\n              secondCard = index;\n              clickable = false;\n            }\n          }\n\n          if (\n            firstCard !== null &&\n            secondCard !== null &&\n            firstCard !== secondCard\n          ) {\n            if (\n              allCards[firstCard].dataset.suit ===\n                allCards[secondCard].dataset.suit &&\n              allCards[firstCard].dataset.value ===\n                allCards[secondCard].dataset.value\n            ) {\n              allCards[firstCard].classList.add(\"successfully\");\n\n              allCards[secondCard].classList.add(\"successfully\");\n\n              firstCard = null;\n              secondCard = null;\n              clickable = true;\n              const arrSuccess = allCards.filter((item) =>\n                item.classList.contains(\"successfully\")\n              );\n              console.log(arrSuccess);\n              if (allCards.length === arrSuccess.length) {\n                winner = true;\n                isWinner(winner);\n              }\n            } else {\n              isWinner(winner);\n            }\n          }\n        }\n      })\n    );\n  }\n};\n","import \"./styles.css\";\nimport { startPage } from \"./start\";\nexport const cardsApp = () => {\n  startPage();\n};\n\ncardsApp();\n\n// import {\n//   renderStartPage,\n//   renderEasyPage,\n//   renderMediumPage,\n//   renderHardPage,\n// } from \"./start\";\n// import Deck from \"./deck\";\n// const deck = new Deck();\n// deck.shuffle();\n// console.log(deck.cards);\n// let contentElement = document.getElementById(\"page\");\n\n// renderStartPage({ contentElement });\n\n// let startButton = document.getElementById(\"button_start\");\n\n// startButton.addEventListener(\"click\", () => {\n//   let buttonOneLevel = document.getElementById(\"radio1\");\n//   let buttonTwoLevel = document.getElementById(\"radio2\");\n//   let buttonThreeLevel = document.getElementById(\"radio3\");\n//   //let radio = document.querySelectorAll('.button-level')\n//   //  for(let i = 0; i < radio.length; i++){\n//   //   if (radio[i].checked) {\n//   //    renderEasyPage({contentElement});\n//   //   }\n//   //  }\n//   if ((buttonOneLevel as HTMLInputElement).checked) {\n//     renderEasyPage({ contentElement });\n//   }\n\n//   if ((buttonTwoLevel as HTMLInputElement).checked) {\n//     renderMediumPage({ contentElement });\n//   }\n//   if ((buttonThreeLevel as HTMLInputElement).checked) {\n//     renderHardPage({ contentElement });\n//   }\n// });\n","// export function renderStartPage({ contentElement }) {\n//     let startPageHtml = `<div class=\"box \" id=\"box\">\n//     <h1 class=\"heading\" >Выбери сложность</h1>\n//   <div class=\"box-button\" id = \"box_button\">\n\n// <div class=\"button\">\n//     <input type=\"radio\" class=\"button-level\" id=\"radio1\" name=\"radios\" value=\"1\" checked>\n//     <label for=\"radio1\">1</label>\n// </div>\n\n// <div class=\"button\">\n//     <input type=\"radio\"class=\"button-level\"id=\"radio2\" name=\"radios\" value=\"2\" >\n//     <label for=\"radio2\">2</label>\n// </div>\n\n// <div class=\"button\">\n//     <input type=\"radio\" class=\"button-level\" id=\"radio3\" name=\"radios\" value=\"3\" >\n//     <label for=\"radio3\">3</label>\n// </div>\n//   </div>\n//   <button id=\"button_start\" class=\"button-start\">Старт</button>\n//   </div>`;\n//     contentElement.innerHTML = startPageHtml ;\n//   }\n\n//   export function renderEasyPage({ contentElement }) {\n//     let easyPageContent = `<div class = \"level-page center\">\n//     <div class = \"level-page-heading center\">\n//       <div class=\"time-game\">\n//       <div class=\"min-sek\">\n//           <p>min</p>\n//           <p>sek</p>\n//       </div>\n\n//   <h2 class=\"time\">00.00</h2>\n//   </div>\n//   <button class =\"button-start\">Начать заново</button>\n//    </div>\n//    <div class=\"cards\" id=\"cards\">\n//    <div class=\"card\" data-cardValue=\"10\">\n//    <p class=\"card-value-up\">10</p>\n//    <p class=\"card-value-down\">10</p>\n//    <img src=\"./cards/чери.svg\" alt=\"pik\" class=\"suit-big\">\n//    <img src=\"./cards/чери.svg\" alt=\"pik\" class=\"suit-small-up\">\n//    <img src=\"./cards/чери.svg\" alt=\"pik\" class=\"suit-small-down\">\n//   </div>\n//    </div>\n//                           </div>`;\n//     contentElement.innerHTML = easyPageContent;\n//   }\n\n//   export function renderMediumPage({ contentElement }) {\n//     let mediumPageContent = `<div class = \"level-page center\">\n//     <div class = \"level-page-heading center\">\n//       <div class=\"time-game\">\n//       <div class=\"min-sek\">\n//           <p>min</p>\n//           <p>sek</p>\n//       </div>\n\n//   <h2 class=\"time\">00.00</h2>\n//   </div>\n//   <button class =\"button-start\">Начать заново</button>\n//    </div>\n//    <div class=\"cards\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    </div>\n//                           </div>`;\n//     contentElement.innerHTML = mediumPageContent;\n//   }\n\n//   export function renderHardPage({ contentElement }) {\n//     let hardPageContent = `<div class = \"level-page center\">\n//     <div class = \"level-page-heading center\">\n//       <div class=\"time-game\">\n//       <div class=\"min-sek\">\n//           <p>min</p>\n//           <p>sek</p>\n//       </div>\n\n//   <h2 class=\"time\">00.00</h2>\n//   </div>\n//   <button class =\"button-start\">Начать заново</button>\n//    </div>\n//    <div class=\"cards\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    <img src=\"./cards/рубашка.svg\" alt=\"\">\n//    </div>\n//                           </div>`;\n//     contentElement.innerHTML = hardPageContent;\n//   }\nimport { startGame } from \"./game\";\n\nexport const startPage = () => {\n  const gameSection = document.querySelector(\n    \".game-section-start__container\"\n  ) as HTMLElement;\n\n  gameSection.innerHTML =`<div class=\"game-section-start__container\">\n  <h2 class=\"game-menu__title\">Выбери <br>сложность</h2>\n  <button class=\"game-menu-btn\">1</button>\n  <button class=\"game-menu-btn\">2</button>\n  <button class=\"game-menu-btn\">3</button>\n  <button class=\"game-menu__start-btn\">Старт</button>\n</div>`;\n\n  const chooseDifficult = document.querySelectorAll(\n    \".game-menu-btn\"\n  );\n\n  chooseDifficult.forEach((element) =>\n    element.addEventListener(\"click\", () => {\n      chooseDifficult.forEach((el) =>\n        el.classList.remove(\"game-menu-btn_checked\")\n      );\n      element.classList.add(\"game-menu-btn_checked\");\n      const buttonStart = document.querySelector(\n        \".game-menu__start-btn\"\n      ) as HTMLElement;\n\n      buttonStart.addEventListener(\"click\", () => {\n        startGame(element.textContent);\n      });\n    })\n  );\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","SUIT","VALUES","Deck","constructor","cards","flatMap","suit","map","value","Card","freshDeck","this","numberOfCards","length","shuffle","i","newIndex","Math","floor","random","oldValue","duplicateArrayAndMix","array","duplicateCards","j","temp","startGame","difficult","suitsBackground","gameSection","document","querySelector","gameTable","style","opacity","display","cardsHtml","initialCount","deck","slice","createIconsArray","card","join","innerHTML","addEventListener","coutDownEl","timer","textContent","id","setInterval","clearInterval","querySelectorAll","closecards","window","timeGame","minutes","seconds","setTimeout","firstCard","secondCard","clickable","winner","allCards","Array","from","forEach","index","console","log","classList","contains","remove","dataset","add","arrSuccess","filter","item","isWinner","game","timerResult","cardsApp","chooseDifficult","element","el","startPage"],"sourceRoot":""}